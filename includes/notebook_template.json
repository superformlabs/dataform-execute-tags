{
  "cells": [
   {
    "cell_type": "code",
    "execution_count": null,
    "metadata": {
     "id": "bIw82qhuHWy0"
    },
    "outputs": [],
    "source": [
     "from google.auth import default\n",
     "from google.auth.transport.requests import Request\n",
     "import requests\n",
     "import json, base64, os"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": null,
    "metadata": {
     "id": "l9ecRj3QdFcs"
    },
    "outputs": [],
    "source": [
     "class RefreshGCPError(Exception):\n",
     "    pass\n",
     "\n",
     "class ExternalAPIError(Exception):\n",
     "    def __init__(self, status_code: int, detail: str):\n",
     "        self.status_code = status_code\n",
     "        self.detail = detail\n",
     "        super().__init__(detail)"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": null,
    "metadata": {
     "id": "4lh1N15Vc0OU"
    },
    "outputs": [],
    "source": [
     "def get_access_token():\n",
     "    \"\"\"Get access token using default credentials (works on GCP).\"\"\"\n",
     "    credentials, project = default()\n",
     "\n",
     "    # Refresh the token if needed\n",
     "    auth_req = Request()\n",
     "    credentials.refresh(auth_req)\n",
     "    return credentials.token\n",
     "\n",
     "def get_headers(access_token):\n",
     "    return {\n",
     "        \"Authorization\": f\"Bearer {access_token}\",\n",
     "        \"Content-Type\": \"application/json\",\n",
     "    }\n",
     "\n",
     "def make_request(url, method=\"get\", payload=None, access_token=\"\"):\n",
     "        try:\n",
     "            # Set up the headers\n",
     "            headers = get_headers(access_token)\n",
     "\n",
     "            # Initialize options dictionary\n",
     "            options = {\n",
     "                \"headers\": headers,\n",
     "            }\n",
     "            if payload:\n",
     "                options[\"json\"] = (\n",
     "                    payload  # Automatically encodes the payload as JSON and adds Content-Type\n",
     "                )\n",
     "\n",
     "            # Make the request\n",
     "            if method.lower() == \"get\":\n",
     "                response = requests.get(url, **options)\n",
     "            elif method.lower() == \"post\":\n",
     "                response = requests.post(url, **options)\n",
     "            elif method.lower() == \"put\":\n",
     "                response = requests.put(url, **options)\n",
     "            elif method.lower() == \"delete\":\n",
     "                response = requests.delete(url, **options)\n",
     "            elif method.lower() == \"patch\":\n",
     "                response = requests.patch(url, **options)\n",
     "            else:\n",
     "                print(f\"Unsupported method: {method}\")\n",
     "                return None\n",
     "\n",
     "            try:\n",
     "                print(\n",
     "                    f\"Request result code {url}, {method}, {response.status_code} {response.reason}\"\n",
     "                )\n",
     "            except Exception as e:\n",
     "                print(\"Can't log request result\", str(e))\n",
     "\n",
     "            # token expired\n",
     "            if response.status_code == 401:\n",
     "                print(f\"Request failed = 401: {response.status_code} {response.reason}\")\n",
     "                print(f\"Making {method} request to {url}\")\n",
     "                raise RefreshGCPError\n",
     "            elif response.status_code >= 400:\n",
     "                print(f\"Making {method} request to {url}\")\n",
     "                print(f\"Request failed > 400: {response.status_code} {response.reason}\")\n",
     "                # print(response)\n",
     "                error_details = response.json()\n",
     "                error_message = error_details.get('error', {}).get('message', response.reason)\n",
     "                error_code = error_details.get('error', {}).get('code', response.status_code)\n",
     "                error_status = error_details.get('error', {}).get('status', response.reason)\n",
     "\n",
     "                detailed_error = f\"Status: {error_status}, Code: {error_code}, Message: {error_message}\"\n",
     "                print(f\"Request failed > 400: {response.status_code} - {detailed_error}\")\n",
     "\n",
     "                raise ExternalAPIError(response.status_code, response.reason)\n",
     "            elif response.status_code >= 200:\n",
     "                result = response.json()\n",
     "        except requests.exceptions.HTTPError as http_err:\n",
     "            # Capture HTTP error status and return it\n",
     "            raise ExternalAPIError(response.status_code, response.text) from http_err\n",
     "        except requests.exceptions.RequestException as req_err:\n",
     "            # Handle network or connection errors\n",
     "            raise ExternalAPIError(\n",
     "                500, \"Failed to connect to the external API\"\n",
     "            ) from req_err\n",
     "\n",
     "        return result\n",
     "\n",
     "\n",
     "def make_get_request(url, access_token=\"\"):\n",
     "    return make_request(url, \"get\", None, access_token)\n",
     "\n",
     "def make_post_request(url, payload, access_token=\"\"):\n",
     "    return make_request(url, \"post\", payload, access_token)\n",
     "\n",
     "def make_delete_request(url, payload, access_token=\"\"):\n",
     "    return make_request(url, \"delete\", payload, access_token)\n",
     "\n",
     "\n",
     "\n",
     "def create_compilation_result(data, access_token):\n",
     "    url = f\"https://dataform.googleapis.com/v1beta1/projects/{data['project_id']}/locations/{data['region']}/repositories/{data['dataform_respository_name']}/compilationResults\"\n",
     "\n",
     "    payload = {\n",
     "        \"gitCommitish\": data[\"git_commitish\"],\n",
     "        \"codeCompilationConfig\":{}\n",
     "    }\n",
     "    print(\"payload: \",payload)\n",
     "    return make_post_request(url, payload, access_token)\n",
     "\n",
     "def create_workflow_invocations(data, access_token):\n",
     "    url = f\"https://dataform.googleapis.com/v1beta1/projects/{data['project_id']}/locations/{data['region']}/repositories/{data['dataform_respository_name']}/workflowInvocations\"\n",
     "\n",
     "    payload = {\n",
     "        \"compilationResult\": data[\"compilation_result\"],\n",
     "        \"invocation_config\": {\"included_tags\": data[\"included_tags\"]}\n",
     "    }\n",
     "    return make_post_request(url, payload, access_token)\n",
     "\n",
     "\n",
     "\n",
     "def execute_tags():\n",
     "    DATAFORM_REPOSITORY_NAME = \"%%DATAFORM_REPOSITORY_NAME%%\"\n",
     "    DATAFORM_REPOSITORY_REGION = \"%%DATAFORM_REPOSITORY_REGION%%\"\n",
     "    DATAFORM_GIT_COMMITISH = \"%%DATAFORM_GIT_COMMITISH%%\"\n",
     "    DATAFORM_TAGS = %%DATAFORM_TAGS%%\n",
     "    GOOGLE_CLOUD_PROJECT = \"%%GOOGLE_CLOUD_PROJECT%%\"\n",
     "    access_token = get_access_token()\n",
     "    if not access_token:\n",
     "        raise Exception(\"Failed to get access token\")\n",
     "    else:\n",
     "        print(f\"Access token obtained successfully!\")\n",
     "\n",
     "    data = {\n",
     "        \"project_id\": GOOGLE_CLOUD_PROJECT,\n",
     "        \"region\": DATAFORM_REPOSITORY_REGION,\n",
     "        \"dataform_respository_name\": DATAFORM_REPOSITORY_NAME,\n",
     "        \"git_commitish\": DATAFORM_GIT_COMMITISH,\n",
     "        \"included_tags\":DATAFORM_TAGS,\n",
     "    }\n",
     "    try:\n",
     "        compilation_result = create_compilation_result(data, access_token)\n",
     "        data[\"compilation_result\"] = compilation_result['name']\n",
     "        create_workflow_invocations(data, access_token)\n",
     "    except Exception as e:\n",
     "        print(f\"Error executing tags: {str(e)}\")\n",
     "        raise\n"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": null,
    "metadata": {
     "colab": {
      "base_uri": "https://localhost:8080/",
      "height": 480
     },
     "id": "RRuMxuWVdrnc",
     "outputId": "db93805b-1aa3-48c3-ee4f-ca2f4333c2ce"
    },
    "outputs": [],
    "source": [
     "execute_tags()"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": null,
    "metadata": {
     "id": "h8Koujs8QZ8Y"
    },
    "outputs": [],
    "source": []
   }
  ],
  "metadata": {
   "colab": {
    "cell_execution_strategy": "setup",
    "name": "notebook_template",
    "provenance": []
   },
   "kernelspec": {
    "display_name": "Python 3",
    "name": "python3"
   },
   "language_info": {
    "name": "python"
   }
  },
  "nbformat": 4,
  "nbformat_minor": 0
 }
 